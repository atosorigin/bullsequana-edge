---
- hosts: all
  name: Firmware Update
  connection: local
  gather_facts: False
  vars_files:
    - /var/lib/awx/projects/vars/external_vars.yml

  tasks:
  - name: validate forceoff variable
    assert:
      that:
        - forceoff is defined
      fail_msg: "The variable forceoff is NOT defined in inventory (AWX) or vars/external_vars file (Ansible). See readme.md for more details."
      success_msg: "The variable forceoff is defined"

  - debug:
      msg: "forceoff is {{ forceoff }}"
    when: forceoff is defined

  - name: validate reboot variable
    assert:
      that:
        - reboot is defined
      fail_msg: "The variable reboot is NOT defined in inventory (AWX) or vars/external_vars file (Ansible). See readme.md for more details."
      success_msg: "The variable reboot is defined"

  - debug:
      msg: "reboot is {{ reboot }}"
    when: reboot is defined

  - name: validate file_to_upload variable
    assert:
      that:
        - file_to_upload is defined
      fail_msg: "The variable file_to_upload is NOT defined in inventory (AWX) or vars/external_vars file (Ansible). See readme.md for more details."
      success_msg: "The variable file_to_upload is defined"

  - debug:
      msg: "file_to_upload is {{ file_to_upload }}"
    when: file_to_upload is defined

  - include_tasks: ../utils/utils_create_token.yml

  - name: upload Firmware Image
    uri:
      url: https://{{ baseuri }}/upload/image
      method: PUT
      validate_certs: no
      src: "{{ file_to_upload }}"
      headers:
        X-Auth-Token: "{{ x_token }}"
        Content-Type: "application/octet-stream"
    ignore_errors: yes    
    register: result_upload_firmware

  - name: check if file not found
    fail: msg="Bad path or file name, Please check file path and name in --extra-vars"
    when: result_upload_firmware.failed and not result_upload_firmware.changed and "Could not find or access" in result_upload_firmware.msg

  - include_tasks: ../utils/utils_firmware_inventory.yml

  - name: render Uploaded Firmwares
    debug:
      msg: "Ready firmware = {{ item.key }} as {{ item.value.Purpose }}-{{ item.value.Version }}"
    when: item.value.Activation is defined and item.value.Activation == "xyz.openbmc_project.Software.Activation.Activations.Ready"
    with_dict: "{{ firmware_inventory }}"
  
  - include_tasks: ../utils/utils_host_power_off.yml    
    when: forceoff == True
  
  - include_tasks: ../utils/utils_active_firmware_update.yml

  - name: reboot BMC
    uri:
      url: https://{{ baseuri }}/xyz/openbmc_project/state/bmc0/attr/RequestedBMCTransition
      method: PUT
      validate_certs: no
      headers:
        X-Auth-Token: "{{ x_token }}"
        Content-Type: "application/json"
      body:
        data: xyz.openbmc_project.State.BMC.Transition.Reboot
      body_format: json
    when: reboot == true

  - name: render Evaluate Firmware update
    debug: 
      var: evaluate_firmware_update
    when: reboot == false and evaluate_firmware_update is defined

  - include_tasks: ../utils/utils_firmware_inventory.yml
    when: reboot == false

  - name:  get upload failures
    fail: 
      msg: "Ignored failures - {{ result_upload_firmware.json.data.description }}"
    when: reboot == false and result_upload_firmware.status == 400

  - name: get activation failures
    fail: 
      msg: "{{ item.value.Activation }}"
    when: reboot == False and item.value.Activation is defined and item.value.Activation == 'xyz.openbmc_project.Software.Activation.Activations.Failed' and item.value.RequestedActivation is defined and item.value.RequestedActivation =='xyz.openbmc_project.Software.Activation.RequestedActivations.Active'
    with_dict: "{{ firmware_inventory }}"


