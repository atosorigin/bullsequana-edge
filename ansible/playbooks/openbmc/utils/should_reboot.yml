---

  - name: Set should_reboot if Purpose=BMC and Activation=Active
    set_fact:
        should_reboot: True
    when: >
         item.value.Activation is defined and 
         item.value.Purpose is defined and 
         item.value.Activation == "xyz.openbmc_project.Software.Activation.Activations.Active" and
         item.value.RequestedActivation == "xyz.openbmc_project.Software.Activation.RequestedActivations.Active" and
         item.value.Purpose == "xyz.openbmc_project.Software.Version.VersionPurpose.BMC"

    with_dict: "{{ firmware_inventory }}"

  - name: Determine if BMC should reboot
    debug:
      msg: "BMC update on {{ baseuri }} should reboot and reboot is {{ reboot }}"
      verbosity: 2 
    when: should_reboot is defined and should_reboot == True

  - name: Determine if BMC should reboot
    debug:
      msg: "BMC update on {{ baseuri }} should reboot and reboot is {{ reboot }}"
      verbosity: 2 
    when: should_reboot is defined and should_reboot == True

  - name: Check if BMC update is possible and reboot is True
    fail: msg="Global Update stopped - Your environment variable reboot is False and BMC should reboot => Cannot update BMC"
    when: reboot == False and should_reboot is defined and should_reboot == True

  - name: Reboot BMC
    include_tasks: utils_reboot.yml
    when: reboot == True and should_reboot is defined and should_reboot == True

  - name: Retry until reboot
    include_tasks: wait_until_success_reboot.yml   
    when: reboot == True and should_reboot is defined and should_reboot == True

