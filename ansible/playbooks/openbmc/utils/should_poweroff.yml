---

  - set_fact:
        should_poweroff: False

  - name: Should power off = False
    debug:
      var: should_poweroff
    when: should_poweroff is defined

  - name: Should power off if Purpose=Host/CPLD in evaluated inventory (TS global)
    set_fact:
        should_poweroff: True
    when: >
        evaluate_firmware_update is defined and
        item.name is defined and
        (
            item.name == "xyz.openbmc_project.Software.Version.VersionPurpose.Host"
            or
            item.name == "xyz.openbmc_project.Software.Version.VersionPurpose.CPLD"
        )
    with_items: "{{ evaluate_firmware_update }}"

  - name: Should power off if Purpose=Host/CPLD in firmware inventory
    set_fact:
        should_poweroff: True
    when: > 
        not evaluate_firmware_update is defined and
        item.value.Activation is defined and 
        item.value.Activation == "xyz.openbmc_project.Software.Activation.Activations.Ready" and
        (
           item.value.Purpose == "xyz.openbmc_project.Software.Version.VersionPurpose.Host"
           or
           item.value.Purpose == "xyz.openbmc_project.Software.Version.VersionPurpose.CPLD"
        )
    with_dict: "{{ firmware_inventory }}"

  - name: Should power off
    debug:
      var: should_poweroff
    when: should_poweroff is defined

  - name: Determine if Host should be powered off
    debug:
      msg: "Host {{ baseuri }} should be powered off and forceoff is {{ forceoff }}"
    when: should_poweroff is defined and should_poweroff == True

  - name: Check if BIOS / CPLD update is possible and forceoff is True
    fail: msg="Global Update stopped - Your environment variable forceoff is False and Host should be powered off => Cannot update BIOS/CPLD"
    when: forceoff == False and should_poweroff is defined and should_poweroff == True

  - include_tasks: utils_chassis_power_off.yml    
    when: forceoff == True and should_poweroff is defined and should_poweroff == True
  
  - name: Retry until power off
    include_tasks: wait_until_success_power_off.yml   
    when: forceoff == True and should_poweroff is defined and should_poweroff == True

