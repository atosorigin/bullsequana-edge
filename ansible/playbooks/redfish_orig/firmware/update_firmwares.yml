---
- hosts: all
  name: Firmware Update
  connection: local
  gather_facts: False
  
  tasks:
  - name: Get Http Push URI
    uri:
      url: "https://{{ baseuri }}/redfish/v1/UpdateService"
      method: GET
      validate_certs: False
      user: "{{ username }}"
      password: "{{ password }}"
    register: loaded_images

  - set_fact:
      http_push_uri: "{{ loaded_images.json.HttpPushUri }}"
      verbosity: 1

  - debug:
      msg: "Http Push Uri = {{ http_push_uri }}"
      verbosity: 2

  - name: Get all information available in Update category
    redfish_facts:
      category: Update
      command: GetFirmwareInventory
      baseuri: "{{ baseuri }}"
      user: "{{ username }}"
      password: "{{ password }}"
    failed_when: false
    register: result_firmware_inventory
  
  - debug:
      var: result_firmware_inventory.ansible_facts.redfish_facts.firmware
      verbosity: 2

  - set_fact:
      firmware_inventory_installed: "{{ result_firmware_inventory.ansible_facts.redfish_facts.firmware }}"
      verbosity: 1

  - name: Evaluate if firmware needs to be updated
    local_action: atos_redfish category=Update command=EvaluateFirmwareUpgrade technical_state_path='/mnt/Resources/TechnicalState.xml' firmware_inventory_installed={{ firmware_inventory_installed }} baseuri={{baseuri}} username={{username}} password={{password}}
    delegate_to: 127.0.0.1
    run_once: true
    register: firmware

  - debug:
      var: firmware.result.Firmwares
      verbosity: 2

  - debug:
      var: item.path
      verbosity: 2
    with_items: "{{ firmware.result.Firmwares }}"
  
  - set_fact:
      firmwares: "{{ firmware.result.Firmwares }}"
      verbosity: 1

  - name: Upload available firmware images
    uri:
      url: "https://{{baseuri}}{{ http_push_uri }}"
      method: POST
      src: "/mnt/Resources/Firmware_and_related_documents/{{ item.path }}/{{ item.file }}"
      validate_certs: False
      user: "{{ username }}"
      password: "{{ password }}"
      status_code: 201  # Location should contains uri of the newly created image
    with_items: "{{ firmwares }}"
    register: loaded_images

  - debug:
      var: loaded_images
      verbosity: 2

  - set_fact:
      firmwares: "{{ firmware.result.Firmwares }}"
      verbosity: 1

  - debug:
      var: item.Location
      verbosity: 2
    with_items: "{{ loaded_images.results }}"

  - name: Simple Update on available firmware images
    uri:
      url: "https://{{ baseuri }}/redfish/v1/UpdateService/Action/SimpleUpdate"
      method: POST
      body:  
           ImageURI: "{{ item.location }}"
           TransferProtocol: "HTTPS"
           Targets: [ "{{ item.item.name }}-{{ item.item.available }}" ] 
      body_format: json
      status_code: 200  # No Creation / No Location 
      validate_certs: False
      user: "{{ username }}"
      password: "{{ password }}"
    with_items: "{{ loaded_images.results }}"
    register: simple_updates

  - debug:
      var: simple_updates.msg
      verbosity: 4
    
  - debug:
      msg: "{{ item.item.item.name }} updated to version {{ item.item.item.available }}"
      verbosity: 2
    with_items: "{{ simple_updates.results }}"

  - name: build foo_string
    set_fact:
      csv_data: "{% for i in simple_updates.results %}{{ i.item.item.available }},{{ i.item.item.name }},{{ i.item.item.installed }}\n{%endfor%}"
      verbosity: 2
      
  - debug:
      var: csv_data
      verbosity: 1
