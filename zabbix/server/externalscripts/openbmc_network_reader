#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script reads network address from network inventory
Usage: ./openbmc_network_reader --file=10.22.87.132-network.json --item=ipv4 --property="Origin" --eth="eth1"

Atos BullSequana Edge Zabbix Template

Copyright (C) 2022 Atos

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.

All users shall be bound by the terms and 
conditions of the GNU General Public License v3.0  
which are stated extensively at the following address : 
https://www.gnu.org/licenses/gpl-3.0.en.html

"""

__author__ = "Francine Sauvage"
__contact__ = "support@atos.net"
__date__ = "2022/01/12"
__deprecated__ = False
__email__ =  "francine.sauvage@atos.net"
__license__ = "GPLv3"
__status__ = "Production"
__version__ = "2.1.10"
__copyright__ = "Copyright 2022, Atos"
__maintainer__ = "Francine Sauvage"
__credits__ = ["Francine Sauvage"]

import sys
import os
import json
import argparse

def get_json_from_file(file_name):
  with open(os.path.join(os.getcwd(), "openbmc", file_name), 'r') as file_to_read:
    cache = json.load(file_to_read)
  return cache

def main(args):
  parser = argparse.ArgumentParser(description="This script reads network information previously collected from BullSequana Edge devices")
  parser.add_argument("-f", "--file", dest="file", help="file name for the item", required=True)
  parser.add_argument("-i", "--item", dest="item", help="item identifier like ipv4 ipv6 ...", default="ipv4")
  parser.add_argument("-o", "--origin", dest="origin", help="Origin property of the item", default="xyz.openbmc_project.Network.IP.AddressOrigin.DHCP")
  parser.add_argument("-p", "--property", dest="property", help="json property of the item", default="Address")
  parser.add_argument("-e", "--eth", dest="eth", help="eth0 or eth1 of the item")
  args = parser.parse_args()
  file_item = args.file.strip()  
  response=None
  items = get_json_from_file(file_item)
  targeted_item = args.item.strip()  
  for key, item in items.iteritems() :    
    if args.eth:
      if not key.startswith("/xyz/openbmc_project/network/"+args.eth.strip()+"/"+targeted_item):      
        continue
    else:
      if not key.startswith("/xyz/openbmc_project/network/"+targeted_item):      
        continue
    targeted_property = args.property.strip() 
    
    if args.origin:
      targeted_origin = args.origin.strip()
      if not targeted_origin == item.get("Origin", None):
        continue
    
    if args.item:
      targeted_type = args.item.strip()
      if args.item.strip() == "ipv4":
        targeted_type = "xyz.openbmc_project.Network.IP.Protocol.IPv4"
      if args.item.strip() == "ipv6":
        targeted_type = "xyz.openbmc_project.Network.IP.Protocol.IPv6"
      if not targeted_type == item.get("Type", None):
        continue

#    print(key)
#    print(targeted_property) 
    response = item.get(targeted_property, None)
    break
  
  if response:
    if type(response) == unicode and response.startswith("xyz.openbmc_project.Network."):
      response = response.replace('xyz.openbmc_project.Network.','')
    print(json.dumps(response))
  
main(sys.argv)
