#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script will be able to read BullSequana Edge information previously discovered via Collect or LLD
Usage: ./openbmc_reader --file=10.22.87.132-state.json -i=/xyz/openbmc_project/state/bmc0 --property=CurrentBMCState

!! careful from web side : to truncate to 50 characters : see https://mypoorbraindump.wordpress.com/2012/06/13/zabbix-modify-last-value-column-width/

Atos BullSequana Edge Zabbix Template

Copyright (C) 2022 Atos

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.

All users shall be bound by the terms and 
conditions of the GNU General Public License v3.0  
which are stated extensively at the following address : 
https://www.gnu.org/licenses/gpl-3.0.en.html

"""

__author__ = "Francine Sauvage"
__contact__ = "support@atos.net"
__date__ = "2022/01/12"
__deprecated__ = False
__email__ =  "francine.sauvage@atos.net"
__license__ = "GPLv3"
__status__ = "Production"
__version__ = "2.1.10"
__copyright__ = "Copyright 2022, Atos"
__maintainer__ = "Francine Sauvage"
__credits__ = ["Francine Sauvage"]

import sys
import os
import json
import argparse

def get_json_from_file(file_name):
  try:    
    with open(os.path.join(os.getcwd(), "openbmc", file_name), 'r') as file_to_read:
      cache = json.load(file_to_read)
    return cache
  except:
    return

def main(args):
  parser = argparse.ArgumentParser(description="This script reads previously collected information from BullSequana Edge devices")
  parser.add_argument("-f", "--file", dest="file", help="file name for the item", required=True)
  parser.add_argument("-i", "--item", dest="item", help="item identifier like /xyz/openbmc_project/inventory/system")
  parser.add_argument("-p", "--property", dest="property", help="json property of the item", required=False)
  args = parser.parse_args()
  file_item = args.file.strip()  

  item = None
  if not args.item:
    item = get_json_from_file(file_item)
    if not item:
      print("Timeout")
      return
  else:
    items = get_json_from_file(file_item)
    if not items:
      print("Timeout")
      return
    item = args.item.strip()
    if file_item.endswith('temperature.json'):
      item = '/xyz/openbmc_project/sensors/temperature/' + item
    if file_item.endswith('voltage.json'):
      item = '/xyz/openbmc_project/sensors/voltage/' + item
    if file_item.endswith('fan_tach.json'):
      item = '/xyz/openbmc_project/sensors/fan_tach/' + item
    item = items.get(item, None)
  if not item:
    #print None
    return
  if args.property:
    response = item.get(args.property.strip(),None) # a property is specified
  else:
    response = item # no property specified => return json object
  if type(response) == unicode and response.startswith("xyz.openbmc_project.State."):
    response = response.replace('xyz.openbmc_project.State.','')
  if type(response) == unicode and response.startswith("xyz.openbmc_project.Control."):
    response = response.replace('xyz.openbmc_project.Control.','')  
  if type(response) == unicode and response.startswith("xyz.openbmc_project."):
    response = response.replace('xyz.openbmc_project.','')
  print(json.dumps(response))

main(sys.argv)
