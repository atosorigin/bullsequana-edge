#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script reads firmware data from software inventory
Usage: ./openbmc_firmware_reader --file=10.22.87.132-software.json --item=Host --property="Activation" --item=BMC --activation="Active"

Atos BullSequana Edge Zabbix Template

Copyright (C) 2022 Atos

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.

All users shall be bound by the terms and 
conditions of the GNU General Public License v3.0  
which are stated extensively at the following address : 
https://www.gnu.org/licenses/gpl-3.0.en.html

"""

__author__ = "Francine Sauvage"
__contact__ = "support@atos.net"
__date__ = "2022/01/12"
__deprecated__ = False
__email__ =  "francine.sauvage@atos.net"
__license__ = "GPLv3"
__status__ = "Production"
__version__ = "2.1.10"
__copyright__ = "Copyright 2022, Atos"
__maintainer__ = "Francine Sauvage"
__credits__ = ["Francine Sauvage"]

import sys
import os
import json
import argparse

def get_json_from_file(file_name):
  try:
    with open(os.path.join(os.getcwd(), "openbmc", file_name), 'r') as file_to_read:
      return json.load(file_to_read)
  except:
    return

def main(args):
  parser = argparse.ArgumentParser(description="This script reads firmware data previously collected from BullSequana Edge devices")
  parser.add_argument("-f", "--file", dest="file", help="file name for the item", required=True)
  parser.add_argument("-i", "--item", dest="item", help="item identifier like Host BMC or CPLD... with the same uppercase/lowercase as MANIFEST file ", default="Host")
  parser.add_argument("-p", "--property", dest="property", help="json property of the item", default="Version")
  parser.add_argument("-a", "--activation", dest="activation", help="Activation", default="Active")
  args = parser.parse_args()
  file_item = args.file.strip()  
  response = "N/A"

  targeted_purpose = args.item.strip()
  targeted_activation = args.activation.strip()

  items = get_json_from_file(file_item)
  if not items:
    print(response)
    return

  for _, item in items.iteritems() :    
    # Activation
    item_activation = item.get("Activation", None)
    if not item_activation:
      continue
    item_activation = item_activation.split('xyz.openbmc_project.Software.Activation.Activations.')[-1]
    if not targeted_activation == item_activation:
      continue
    
    # Purpose
    item_purpose = item.get("Purpose", None)
    if not item_purpose:
      continue
    item_purpose = item_purpose.split('xyz.openbmc_project.Software.Version.VersionPurpose.')[-1]
    if not targeted_purpose == item_purpose :
      continue
    # Found same Activation and Purpose
    item_version = item.get("Version", None)
    response = item_version
    break
  if type(response) == unicode and response.startswith("xyz.openbmc_project.Software."):
    response = response.replace('xyz.openbmc_project.Software.','')
  if response:
    print(json.dumps(response))

main(sys.argv)
