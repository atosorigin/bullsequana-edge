#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script collects information from BullSequana Edge devices
Usage: ./openbmc_collect --user="root" --password="sdd@atos" --bmc="172.31.92.34" --item="/xyz/openbmc_project/sensors/enumerate"

Atos BullSequana Edge Zabbix Template

Copyright (C) 2022 Atos

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.

All users shall be bound by the terms and 
conditions of the GNU General Public License v3.0  
which are stated extensively at the following address : 
https://www.gnu.org/licenses/gpl-3.0.en.html

"""

__author__ = "Francine Sauvage"
__contact__ = "support@atos.net"
__date__ = "2022/01/12"
__deprecated__ = False
__email__ =  "francine.sauvage@atos.net"
__license__ = "GPLv3"
__status__ = "Production"
__version__ = "2.1.10"
__copyright__ = "Copyright 2022, Atos"
__maintainer__ = "Francine Sauvage"
__credits__ = ["Francine Sauvage"]

import sys
import requests
import urllib3
from requests.auth import HTTPBasicAuth
import os
import json
import argparse
from openbmc_psk_password import AESCipher

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_filename(item_to_file, host):
  filename = item_to_file.split("/")
  if not filename or len(filename) < 2:
    raise TypeError('item should be a part of url /xyz/openbmc_project/<item to enumerate>/enumerate : ({item} given)'.format(item=item_to_file))
  if filename[-1] == "enumerate":
    filename = "{host}-{item}.json".format(host=host, item=filename[-2])
  else:
    filename = "{host}-{parent}-{item}.json".format(host=host, parent=filename[-2], item=filename[-1])
  return os.path.join(os.getcwd(), "openbmc", filename)

def write_collect(file_name, json_to_write):
  with open(file_name, 'w') as file_to_write:
    if json_to_write:
      json.dump(json_to_write, file_to_write)
    file_to_write.close()

def main(args):
  parser = argparse.ArgumentParser(description="This script will be able to collect information from BullSequana Edge devices")
  parser.add_argument("-u", "--user", dest="user", help="user name for BMC", required=True)
  parser.add_argument("-p", "--password", dest="password", help="password for BMC", required=True)
  parser.add_argument("-b", "--bmc", dest="bmc", help="IP for the BMC", required=True)
  parser.add_argument("-i", "--item", dest="item", help="item identifier like /xyz/openbmc_project/sensors/enumerate or /xyz/openbmc_project/inventory/system", required=True)
  args = parser.parse_args()  

  if not args.user or not args.password or not args.bmc or not args.item:
    raise TypeError('openbmc_collect() takes 4 arguments ({} given)'.format(len(args) + 1))

  password = args.password.strip()
  decrypted_password = AESCipher(args.password.strip()).decrypt()
  if decrypted_password:
    password = decrypted_password

  uri = "https://{host}{item_url}".format(host=args.bmc.strip(), item_url=args.item)
  timeout = int(os.environ.get('ZBX_TIMEOUT',4)) - 1
  data = {}
  try:
    response = requests.get(uri, auth=HTTPBasicAuth(args.user.strip(), password), verify=False, timeout=timeout)
    data = response.json()
  except requests.exceptions.Timeout:
    # Maybe set up for a retry, or continue in a retry loop
    data["data"] = None
  except requests.exceptions.TooManyRedirects:
    # Tell the user their URL was bad and try a different one
    data["data"] = None
  except requests.exceptions.RequestException as e:
    # catastrophic error. bail.
    data["data"] = None

  filename = get_filename(args.item.strip(), args.bmc.strip())
  write_collect(filename, data["data"])
  print(filename)

main(sys.argv)
